name: Demo build docker hub image

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main
    # branches: [ main ]

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: ./examples/microservices/auth

env:
  IMAGE_NAME: gh-nm-auth

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    outputs:
      build_id: ${{ steps.build_step.outputs.build_id }}
      version: ${{ steps.push_step.outputs.version }}

    steps:
      - name: Checkout
        id: checkout_step
        uses: actions/checkout@v2

      - name: Build image
        id: build_step
        run: |
          docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
          echo "Result of checkout_step was '${{ steps.checkout_step.outcome }}'"
          echo "::set-output name=build_id::${GITHUB_RUN_ID}"

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push image
        id: push_step
        run: |
          IMAGE_ID=${{ secrets.DOCKERHUB_USERNAME }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

          # Set version fo output2
          echo "Image version: ${VERSION}"
          echo "::set-output name=version::${VERSION}"

          # Fake fails
          # if [[ $(($RANDOM % 2)) == 0 ]]; then exit 0; else exit 1; fi
          # exit 1;

      - name: The job has failed
        if: ${{ failure() }}
        run: echo "The job has failed"

  test_staging_environment:
    runs-on: ubuntu-latest
    needs: [push]
    environment: staging

    steps:
      - name: Checkout
        id: checkout_step
        uses: actions/checkout@v2
      - run: exit 1;

  test_development_environment:
    runs-on: ubuntu-latest
    needs: [push]
    environment: development
    if: ${{ always() }}

    steps:
      - name: Checkout
        id: checkout_step
        uses: actions/checkout@v2
      - run: echo ${{needs.push.outputs.build_id}}

  test_production_environment:
    runs-on: ubuntu-latest
    needs: [test_development_environment]
    environment: production
    if: ${{ failure() && github.event_name == 'push' }}

    steps:
      - name: Checkout
        id: checkout_step
        uses: actions/checkout@v2
      - run: echo ${{needs.push.outputs.build_id}}
      - run: echo ${{needs.push.outputs.version}}
      - run: echo ${{ secrets.PRODUCTION_SECRET }}
